name: CI/CD with SonarQube

on:
  push:
    branches:
      - main

jobs:
  sonarqube:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner
        run: |
          # Download and install SonarScanner CLI
          curl -sL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip -d $HOME/sonar-scanner
          echo "$HOME/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH
          chmod +x $HOME/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin/sonar-scanner

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Run SonarQube analysis using SonarCloud
          sonar-scanner \
            -Dsonar.projectKey=apoorv2510_finaldevops \
            -Dsonar.organization=apoorv2510 \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

  deploy:
    name: Deploy to EC2
    needs: sonarqube  # Ensures SonarQube runs before deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.dockerfile
          push: true
          tags: apoorvkuma/finaldev:v1.0

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          printf "%b" "${EC2_SSH_KEY}" > key.pem
          chmod 600 key.pem

          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << EOF
            command -v docker || { echo "Docker not found, exiting with 127"; exit 127; }
            command -v docker-compose || sudo apt-get install -y docker-compose

            docker pull apoorvkuma/finaldev:v1.0

            mkdir -p ~/deploy
            cd ~/deploy
            echo "${{ secrets.DOCKER_COMPOSE_FILE }}" > docker-compose.yml
            docker-compose down
            docker-compose up -d --build
          EOF

      - name: Clean up
        run: rm -f key.pem
