name: Deploy to EC2

on:
  push:
    branches:
      - main  # Triggers on push to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Custom Path for SonarScanner
        run: |
          # Create a custom path for SonarScanner
          mkdir -p $HOME/tools/sonarqube
          cd $HOME/tools/sonarqube

          # Download and install SonarScanner
          curl -sL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip -o sonar-scanner.zip
          unzip sonar-scanner.zip -d $HOME/tools/sonarqube

          # Update PATH environment variable
          echo "$HOME/tools/sonarqube/sonar-scanner-4.8.0.2856-linux/bin" >> $GITHUB_PATH

      - name: Ensure sh is available
        run: |
          sudo apt-get update
          sudo apt-get install -y bash
          if [ ! -f /usr/bin/sh ]; then sudo ln -s /usr/bin/bash /usr/bin/sh; fi

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          JAVA_HOME: ${{ secrets.JAVA_HOME }}
          PATH: ${{ secrets.JAVA_HOME }}/bin:$PATH
        run: |
          # Run SonarQube analysis using SonarCloud
          sonar-scanner \
            -Dsonar.projectKey=apoorv2510_finaldevops \
            -Dsonar.organization=apoorv2510 \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile.dockerfile  # Specify the Dockerfile path and name
          push: true
          tags: apoorvkuma/finaldev:v1.0

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          printf "%b" "${EC2_SSH_KEY}" > key.pem
          chmod 600 key.pem

          # Test SSH connection
          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST "echo 'SSH connection successful'"

          # SSH into the EC2 instance and deploy with Docker Compose
          ssh -o StrictHostKeyChecking=no -i key.pem $EC2_USER@$EC2_HOST << EOF
            # Ensure Docker and Docker Compose are available
            command -v docker || { echo "Docker not found, exiting with 127"; exit 127; }
            command -v docker-compose || sudo apt-get install -y docker-compose

            # Pull the latest Docker image from Docker Hub
            docker pull apoorvkuma/finaldev:v1.0

            # Navigate to the directory containing docker-compose.yml or create it if needed
            mkdir -p ~/deploy
            cd ~/deploy

            # Copy the docker-compose.yml file to the EC2 instance
            echo "${{ secrets.DOCKER_COMPOSE_FILE }}" > docker-compose.yml

            # Use Docker Compose to bring up the latest version
            docker-compose down  # Stops and removes existing containers
            docker-compose up -d --build  # Builds and starts containers in detached mode
          EOF

      - name: Clean up
        run: rm -f key.pem
